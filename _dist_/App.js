/* src\App.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import "./index.css.proxy.js";
import { projectStore } from "./JS/stores/project.js";
import Header from "./Components/Header.js";
import Canvas from "./Components/Canvas.js";
import Toolbar from "./Components/Toolbar.js";
import PythonScript from "./Components/PythonScript.js";
import Footer from "./Components/Footer.js";
import Splash from "./Components/Splash.js";
import Sidebar from "./Components/Sidebar/Sidebar.js";

function create_if_block_1(ctx) {
	let pythonscript;
	let current;
	pythonscript = new PythonScript({});

	return {
		c() {
			create_component(pythonscript.$$.fragment);
		},
		m(target, anchor) {
			mount_component(pythonscript, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(pythonscript.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pythonscript.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(pythonscript, detaching);
		}
	};
}

// (38:1) {#if $projectStore.showSplash}
function create_if_block(ctx) {
	let splash;
	let current;
	splash = new Splash({});

	return {
		c() {
			create_component(splash.$$.fragment);
		},
		m(target, anchor) {
			mount_component(splash, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(splash.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(splash.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(splash, detaching);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let div1;
	let header;
	let t0;
	let div0;
	let toolbar;
	let t1;
	let canvas;
	let t2;
	let footer;
	let t3;
	let sidebar;
	let t4;
	let t5;
	let current;
	let mounted;
	let dispose;
	header = new Header({});
	toolbar = new Toolbar({});
	canvas = new Canvas({});
	footer = new Footer({});
	sidebar = new Sidebar({});
	let if_block0 = /*$projectStore*/ ctx[0].showPythonScript && create_if_block_1(ctx);
	let if_block1 = /*$projectStore*/ ctx[0].showSplash && create_if_block(ctx);

	return {
		c() {
			main = element("main");
			div1 = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			div0 = element("div");
			create_component(toolbar.$$.fragment);
			t1 = space();
			create_component(canvas.$$.fragment);
			t2 = space();
			create_component(footer.$$.fragment);
			t3 = space();
			create_component(sidebar.$$.fragment);
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if (if_block1) if_block1.c();
			attr(div0, "id", "toolBarAndCanvasHolder");
			attr(div0, "class", " bg-gray-100 w-full h-full flex flex-row justify-between flex-1 overflow-hidden");
			attr(div1, "id", "mainWindow");
			attr(div1, "class", "w-full h-full flex flex-col overflow-hidden bg-theme-mainBackground");
			attr(main, "class", "w-full h-full flex flex-row text-center bg-gray-100");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, div1);
			mount_component(header, div1, null);
			append(div1, t0);
			append(div1, div0);
			mount_component(toolbar, div0, null);
			append(div0, t1);
			mount_component(canvas, div0, null);
			append(div1, t2);
			mount_component(footer, div1, null);
			append(main, t3);
			mount_component(sidebar, main, null);
			append(main, t4);
			if (if_block0) if_block0.m(main, null);
			append(main, t5);
			if (if_block1) if_block1.m(main, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "mousedown", projectStore.toggleMouseHeld),
					listen(div1, "mouseup", projectStore.toggleMouseHeld)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$projectStore*/ ctx[0].showPythonScript) {
				if (if_block0) {
					if (dirty & /*$projectStore*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(main, t5);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$projectStore*/ ctx[0].showSplash) {
				if (if_block1) {
					if (dirty & /*$projectStore*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(main, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(toolbar.$$.fragment, local);
			transition_in(canvas.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			transition_in(sidebar.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(header.$$.fragment, local);
			transition_out(toolbar.$$.fragment, local);
			transition_out(canvas.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			transition_out(sidebar.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(header);
			destroy_component(toolbar);
			destroy_component(canvas);
			destroy_component(footer);
			destroy_component(sidebar);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(0, $projectStore = $$value));
	return [$projectStore];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;