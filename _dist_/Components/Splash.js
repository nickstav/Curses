/* src\Components\Splash.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space
} from "../../web_modules/svelte/internal.js";

import { projectStore } from "../JS/stores/project.js";
import { clickOutside } from "../JS/eventListeners/clickOutside.js";

function create_fragment(ctx) {
	let div6;
	let div5;
	let div0;
	let t1;
	let div2;
	let t24;
	let div3;
	let button;
	let t26;
	let div4;
	let clickOutside_action;
	let mounted;
	let dispose;

	return {
		c() {
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");
			div0.innerHTML = `<h1 class="text-2xl text-header-font font-bold tracking-widest ml-4">ORISON</h1>`;
			t1 = space();
			div2 = element("div");

			div2.innerHTML = `<h2 id="introTitle" class="text-lg text-center font-bold">Welcome to <span class="tracking-widest">ORISON</span>!</h2> 
        <br/> 
        <div id="introContent" class="flex flex-row flex-1 w-full py-2"><p id="what" class="flex-1 px-6 py-2"><strong>What is <span class="tracking-widest">ORISON</span>?</strong> 
                <br/> 
                <span class="tracking-widest">ORISON</span> is an app that allows you to create a UI / progress screen / whatever you want 
                for command-line interpreters such as cmd.exe quickly and efficiently using a canvas tool.
                <br/></p> 
            <p id="how" class="flex-1 px-6 py-2"><strong>How to use it</strong> 
                <br/>
                Add (and edit) lines, rectangles, text and progress bars on a canvas that 
                represents your cmd shell.
                <br/> 
                <br/>
                Once finished with your design, hit the export button to copy or download a Python script that uses the
                <a href="https://docs.python.org/3/library/curses.html#module-curses" rel="noopener" target="_blank" class="font-mono hover:text-header">curses</a>
                library to build your canvas when using the usual &quot;python script.py&quot; command in your command prompt shell.
                <br/></p></div> 
        <p id="signOff" class="flex justify-center py-6 px-6">Thanks for visiting this app, please get in touch with any suggestions/criticisms for future versions!
            üëç
            <br/></p>`;

			t24 = space();
			div3 = element("div");
			button = element("button");
			button.textContent = "Close";
			t26 = space();
			div4 = element("div");

			div4.innerHTML = `<p class="text-xs font-semibold text-gray-700"><a href="https://ko-fi.com/nickstav" rel="noopener" target="_blank" class="text-xs underline hover:text-header">ko-fi page</a>
                    |
                    <a href="https://github.com/nickstav" rel="noopener" target="_blank" class="text-xs underline hover:text-header">github profile</a></p>`;

			attr(div0, "id", "previewHeader");
			attr(div0, "class", "bg-header w-full h-12 text-gray700 flex justify-between items-center border-b border-header-border select-none");
			attr(div2, "id", "introText");
			attr(div2, "class", "flex flex-col justify-between w-full p-3 select-none");
			attr(button, "class", "h-8 w-24 text-xs bg-sidebar-lighter hover:text-header hover:border-header font-semibold border-black border 2");
			attr(div3, "id", "buttonHolder");
			attr(div3, "class", "flex justify-center py-2 select-none");
			attr(div4, "class", "flex h-6 w-full justify-center items-center bg-sidebar-lighter border-t border-sidebar");
			attr(div5, "id", "splashHolder");
			attr(div5, "class", "flex flex-col w-3/5 rounded-sm text-left text-sm bg-sidebar border");
			attr(div6, "id", "overlay");
			attr(div6, "class", "w-full h-full bg-black bg-opacity-80 fixed top-0 left-0 flex items-center justify-center align-center");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div0);
			append(div5, t1);
			append(div5, div2);
			append(div5, t24);
			append(div5, div3);
			append(div3, button);
			append(div5, t26);
			append(div5, div4);

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[0]),
					action_destroyer(clickOutside_action = clickOutside.call(null, div5)),
					listen(div5, "click_outside", /*click_outside_handler*/ ctx[1])
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div6);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self) {
	const click_handler = () => {
		projectStore.toggleSplash();
	};

	const click_outside_handler = () => {
		projectStore.toggleSplash();
	};

	return [click_handler, click_outside_handler];
}

class Splash extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Splash;