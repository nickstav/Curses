import './ToolbarButton.css.proxy.js';
/* src\Components\ToolbarButton.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_slot,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	safe_not_equal,
	set_style,
	toggle_class,
	transition_in,
	transition_out,
	update_slot
} from "../../web_modules/svelte/internal.js";

import {
	toolbarActiveColour,
	toolbarPassiveColour
} from "../JS/constants/colours.js";

import { buttonCurrentlyPressed } from "../JS/items/selectTool.js";
import { projectStore } from "../JS/stores/project.js";

function create_fragment(ctx) {
	let div;
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div = element("div");
			button = element("button");
			if (default_slot) default_slot.c();
			attr(button, "id", "toolbarButton");
			attr(button, "title", /*label*/ ctx[0]);
			attr(button, "class", "flex h-10 w-10 p-2 justify-center items-center bg-cover opacity-85 hover:opacity-100 rounded-md");
			set_style(button, "background-color", "var(--bgColour)");
			set_style(button, "outline", "none");
			set_style(div, "--bgColour", /*bgColour*/ ctx[2]);
			attr(div, "class", "py-2 px-2 cursor-pointer hover:text-header-font svelte-piwp9r");
			toggle_class(div, "selected", /*label*/ ctx[0] === /*toolSelected*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div, "click", function () {
					if (is_function(/*editCanvas*/ ctx[1])) /*editCanvas*/ ctx[1].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (!current || dirty & /*label*/ 1) {
				attr(button, "title", /*label*/ ctx[0]);
			}

			if (!current || dirty & /*bgColour*/ 4) {
				set_style(div, "--bgColour", /*bgColour*/ ctx[2]);
			}

			if (dirty & /*label, toolSelected*/ 9) {
				toggle_class(div, "selected", /*label*/ ctx[0] === /*toolSelected*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(6, $projectStore = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { label } = $$props, { editCanvas } = $$props;
	let bgColour;

	$$self.$$set = $$props => {
		if ("label" in $$props) $$invalidate(0, label = $$props.label);
		if ("editCanvas" in $$props) $$invalidate(1, editCanvas = $$props.editCanvas);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	let toolSelected;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$projectStore*/ 64) {
			$: $$invalidate(3, toolSelected = buttonCurrentlyPressed($projectStore.tool));
		}

		if ($$self.$$.dirty & /*toolSelected, label*/ 9) {
			$: if (toolSelected === label) {
				$$invalidate(2, bgColour = toolbarActiveColour);
			} else {
				$$invalidate(2, bgColour = toolbarPassiveColour);
			}
		}
	};

	return [label, editCanvas, bgColour, toolSelected, $$scope, slots];
}

class ToolbarButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { label: 0, editCanvas: 1 });
	}
}

export default ToolbarButton;