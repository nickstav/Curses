/* src\Components\Canvas.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import SizeParagraph from "./SizeParagraph.js";
import { onMount } from "../../web_modules/svelte.js";
import { projectStore } from "../JS/stores/project.js";
import { gridAxis } from "../JS/stores/grid.js";
import { gridDimension } from "../JS/constants/canvasSize.js";

import {
	handleMouseClick,
	handleMouseMove,
	handleMouseDown,
	handleMouseRelease,
	handleMouseOut,
	handleMouseEnter,
	handleKeyDown
} from "../JS/draw/eventHandling.js";

function create_fragment(ctx) {
	let div1;
	let sizeparagraph;
	let t;
	let div0;
	let canvas_1;
	let canvas_1_width_value;
	let canvas_1_height_value;
	let current;
	let mounted;
	let dispose;
	sizeparagraph = new SizeParagraph({});

	return {
		c() {
			div1 = element("div");
			create_component(sizeparagraph.$$.fragment);
			t = space();
			div0 = element("div");
			canvas_1 = element("canvas");
			attr(canvas_1, "id", "projectStore");
			attr(canvas_1, "width", canvas_1_width_value = /*$gridAxis*/ ctx[2].x);
			attr(canvas_1, "height", canvas_1_height_value = /*$gridAxis*/ ctx[2].y);
			attr(div0, "id", "canvasBackground");
			set_style(div0, "width", "var(--canvasW)");
			set_style(div0, "height", "var(--canvasH)");
			set_style(div0, "background-image", "var(--grid)");
			set_style(div0, "background-size", "var(--squareW) var(--squareH)");
			attr(div0, "class", "rounded-sm");
			attr(div1, "id", "canvasHolder");
			attr(div1, "class", "w-full h-full flex flex-col justify-center items-center flex-1 overflow-auto");
			set_style(div1, "--canvasW", /*$gridAxis*/ ctx[2].x + "px");
			set_style(div1, "--canvasH", /*$gridAxis*/ ctx[2].y + "px");
			set_style(div1, "--squareW", gridDimension.x + "px");
			set_style(div1, "--squareH", gridDimension.y + "px");
			set_style(div1, "--grid", /*gridImage*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(sizeparagraph, div1, null);
			append(div1, t);
			append(div1, div0);
			append(div0, canvas_1);
			/*canvas_1_binding*/ ctx[3](canvas_1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "keydown", handleKeyDown),
					listen(canvas_1, "click", handleMouseClick),
					listen(canvas_1, "mousemove", handleMouseMove),
					listen(canvas_1, "mousedown", handleMouseDown),
					listen(canvas_1, "mouseup", handleMouseRelease),
					listen(canvas_1, "mouseout", handleMouseOut),
					listen(canvas_1, "mouseenter", handleMouseEnter)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*$gridAxis*/ 4 && canvas_1_width_value !== (canvas_1_width_value = /*$gridAxis*/ ctx[2].x)) {
				attr(canvas_1, "width", canvas_1_width_value);
			}

			if (!current || dirty & /*$gridAxis*/ 4 && canvas_1_height_value !== (canvas_1_height_value = /*$gridAxis*/ ctx[2].y)) {
				attr(canvas_1, "height", canvas_1_height_value);
			}

			if (!current || dirty & /*$gridAxis*/ 4) {
				set_style(div1, "--canvasW", /*$gridAxis*/ ctx[2].x + "px");
			}

			if (!current || dirty & /*$gridAxis*/ 4) {
				set_style(div1, "--canvasH", /*$gridAxis*/ ctx[2].y + "px");
			}

			if (!current || dirty & /*gridImage*/ 2) {
				set_style(div1, "--grid", /*gridImage*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(sizeparagraph.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sizeparagraph.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(sizeparagraph);
			/*canvas_1_binding*/ ctx[3](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	let $gridAxis;
	component_subscribe($$self, projectStore, $$value => $$invalidate(4, $projectStore = $$value));
	component_subscribe($$self, gridAxis, $$value => $$invalidate(2, $gridAxis = $$value));
	let canvas;
	onMount(() => projectStore.createCanvas(canvas));
	let gridImage;

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$projectStore*/ 16) {
			$: if ($projectStore.appearance === "light") {
				$$invalidate(1, gridImage = "url(./images/greySquare.png)");
			} else {
				$$invalidate(1, gridImage = "url(./images/blackSquare.png)");
			}
		}
	};

	return [canvas, gridImage, $gridAxis, canvas_1_binding];
}

class Canvas extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Canvas;