/* src\Components\Sidebar\Shortcuts.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import DropDown from "./DropDown.js";
import { keyboardKeys } from "../../JS/constants/keyboardKeys.js";
import { projectStore } from "../../JS/stores/project.js";

function create_if_block(ctx) {
	let div2;
	let div0;
	let t19;
	let div1;
	let ul1;
	let li10;
	let strong0;
	let t21;
	let li11;
	let strong1;
	let t23;
	let li12;
	let strong2;
	let t25;
	let li13;
	let strong3;
	let t27;
	let li14;
	let strong4;
	let t29;
	let li15;
	let strong5;
	let t31;
	let li16;
	let t33;
	let li17;
	let strong7;
	let t34;
	let t35;
	let t36_value = keyboardKeys.C + "";
	let t36;
	let t37;
	let li18;
	let t39;
	let li19;
	let strong9;
	let t40;
	let t41;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");

			div0.innerHTML = `<ul><li class="flex items-start pb-1.5">erase</li> 
                <li class="flex items-start pb-1.5">text tool</li> 
                <li class="flex items-start pb-1.5">line tool</li> 
                <li class="flex items-start pb-1.5">rectangle tool</li> 
                <li class="flex items-start pb-1.5">progress bar tool</li> 
                <li class="flex items-start pb-1.5">select tool</li> 
                <li class="flex items-start pb-1.5">select multiple</li> 
                <li class="flex items-start pb-1.5">duplicate</li> 
                <li class="flex items-start pb-1.5">move</li> 
                <li class="flex items-start pb-1.5">align objects</li></ul>`;

			t19 = space();
			div1 = element("div");
			ul1 = element("ul");
			li10 = element("li");
			strong0 = element("strong");
			strong0.textContent = `${keyboardKeys.DELETE}`;
			t21 = space();
			li11 = element("li");
			strong1 = element("strong");
			strong1.textContent = `${keyboardKeys.T}`;
			t23 = space();
			li12 = element("li");
			strong2 = element("strong");
			strong2.textContent = `${keyboardKeys.L}`;
			t25 = space();
			li13 = element("li");
			strong3 = element("strong");
			strong3.textContent = `${keyboardKeys.R}`;
			t27 = space();
			li14 = element("li");
			strong4 = element("strong");
			strong4.textContent = `${keyboardKeys.P}`;
			t29 = space();
			li15 = element("li");
			strong5 = element("strong");
			strong5.textContent = `${keyboardKeys.V}`;
			t31 = space();
			li16 = element("li");
			li16.innerHTML = `<strong>hold shift</strong>`;
			t33 = space();
			li17 = element("li");
			strong7 = element("strong");
			t34 = text(/*keyHeld*/ ctx[0]);
			t35 = text(" + ");
			t36 = text(t36_value);
			t37 = space();
			li18 = element("li");
			li18.innerHTML = `<strong>arrow keys</strong>`;
			t39 = space();
			li19 = element("li");
			strong9 = element("strong");
			t40 = text(/*keyHeld*/ ctx[0]);
			t41 = text(" + arrow keys");
			attr(div0, "id", "toolList");
			attr(div0, "class", "flex flex-col items-start w-18");
			attr(li10, "class", "flex justify-end pb-1.5");
			attr(li11, "class", "flex justify-end pb-1.5");
			attr(li12, "class", "flex justify-end pb-1.5");
			attr(li13, "class", "flex justify-end pb-1.5");
			attr(li14, "class", "flex justify-end pb-1.5");
			attr(li15, "class", "flex justify-end pb-1.5");
			attr(li16, "class", "flex justify-end pb-1.5");
			attr(li17, "class", "flex justify-end pb-1.5");
			attr(li18, "class", "flex justify-end pb-1.5");
			attr(li19, "class", "flex justify-end text-right pb-1.5");
			attr(div1, "id", "keyList");
			attr(div1, "class", "flex flex-1 flex-col pr-1 text-xs");
			attr(div2, "id", "shortcuts");
			attr(div2, "class", "flex flex-row py-1");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t19);
			append(div2, div1);
			append(div1, ul1);
			append(ul1, li10);
			append(li10, strong0);
			append(ul1, t21);
			append(ul1, li11);
			append(li11, strong1);
			append(ul1, t23);
			append(ul1, li12);
			append(li12, strong2);
			append(ul1, t25);
			append(ul1, li13);
			append(li13, strong3);
			append(ul1, t27);
			append(ul1, li14);
			append(li14, strong4);
			append(ul1, t29);
			append(ul1, li15);
			append(li15, strong5);
			append(ul1, t31);
			append(ul1, li16);
			append(ul1, t33);
			append(ul1, li17);
			append(li17, strong7);
			append(strong7, t34);
			append(strong7, t35);
			append(strong7, t36);
			append(ul1, t37);
			append(ul1, li18);
			append(ul1, t39);
			append(ul1, li19);
			append(li19, strong9);
			append(strong9, t40);
			append(strong9, t41);
		},
		p(ctx, dirty) {
			if (dirty & /*keyHeld*/ 1) set_data(t34, /*keyHeld*/ ctx[0]);
			if (dirty & /*keyHeld*/ 1) set_data(t40, /*keyHeld*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h1;
	let t1;
	let dropdown;
	let t2;
	let current;
	let mounted;
	let dispose;

	dropdown = new DropDown({
			props: {
				menuDisplayed: /*$projectStore*/ ctx[1].showShortcuts,
				toggleSubMenu: /*func*/ ctx[3]
			}
		});

	let if_block = /*$projectStore*/ ctx[1].showShortcuts && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "KEYBOARD SHORTCUTS";
			t1 = space();
			create_component(dropdown.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			attr(h1, "class", "w-full text-left font-semibold cursor-pointer select-none");
			attr(div0, "id", "header");
			attr(div0, "class", "w-full flex flex-row pb-1");
			attr(div1, "id", "shortcutsSection");
			attr(div1, "class", "w-full flex flex-col border-t-1 border-black px-3 py-3 select-none font-semibold text-gray-700");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, h1);
			append(div0, t1);
			mount_component(dropdown, div0, null);
			append(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(h1, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const dropdown_changes = {};
			if (dirty & /*$projectStore*/ 2) dropdown_changes.menuDisplayed = /*$projectStore*/ ctx[1].showShortcuts;
			dropdown.$set(dropdown_changes);

			if (/*$projectStore*/ ctx[1].showShortcuts) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(dropdown);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(1, $projectStore = $$value));
	let keyHeld;

	const click_handler = () => {
		projectStore.toggleShortcutMenu();
	};

	const func = () => {
		projectStore.toggleShortcutMenu();
	};

	$: if (navigator.userAgent.indexOf("Mac OS X") != -1) {
		$$invalidate(0, keyHeld = "cmd");
	} else {
		$$invalidate(0, keyHeld = "ctrl");
	}

	return [keyHeld, $projectStore, click_handler, func];
}

class Shortcuts extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Shortcuts;