/* src\Components\Sidebar\TextOptions.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import DropDown from "./DropDown.js";
import { projectStore } from "../../JS/stores/project.js";
import { textNewLine } from "../../JS/constants/toolsList.js";

function create_if_block(ctx) {
	let div;
	let h2;
	let t1;
	let label0;
	let input0;
	let input0_value_value;
	let t2;
	let t3;
	let label1;
	let input1;
	let input1_value_value;
	let t4;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			h2 = element("h2");
			h2.textContent = "text wrapping";
			t1 = space();
			label0 = element("label");
			input0 = element("input");
			t2 = text("\r\n                align at left of canvas");
			t3 = space();
			label1 = element("label");
			input1 = element("input");
			t4 = text("\r\n                align under start of text");
			attr(h2, "class", "font-bold pb-2");
			attr(input0, "type", "radio");
			input0.__value = input0_value_value = textNewLine.TOLEFT;
			input0.value = input0.__value;
			attr(input0, "class", "align-middle");
			/*$$binding_groups*/ ctx[4][0].push(input0);
			attr(label0, "for", "toLeft");
			attr(label0, "class", "pb-1 text-left font-semibold text-gray-700");
			attr(input1, "type", "radio");
			input1.__value = input1_value_value = textNewLine.INDENTED;
			input1.value = input1.__value;
			attr(input1, "class", "align-middle");
			/*$$binding_groups*/ ctx[4][0].push(input1);
			attr(label1, "for", "indented");
			attr(label1, "class", "pb-1 text-left font-semibold text-gray-700");
			attr(div, "id", "newLineOption");
			attr(div, "class", "flex flex-col items-start pt-3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(div, t1);
			append(div, label0);
			append(label0, input0);
			input0.checked = input0.__value === /*$projectStore*/ ctx[0].textNewLine;
			append(label0, t2);
			append(div, t3);
			append(div, label1);
			append(label1, input1);
			input1.checked = input1.__value === /*$projectStore*/ ctx[0].textNewLine;
			append(label1, t4);

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler*/ ctx[3]),
					listen(input1, "change", /*input1_change_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$projectStore*/ 1) {
				input0.checked = input0.__value === /*$projectStore*/ ctx[0].textNewLine;
			}

			if (dirty & /*$projectStore*/ 1) {
				input1.checked = input1.__value === /*$projectStore*/ ctx[0].textNewLine;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			/*$$binding_groups*/ ctx[4][0].splice(/*$$binding_groups*/ ctx[4][0].indexOf(input0), 1);
			/*$$binding_groups*/ ctx[4][0].splice(/*$$binding_groups*/ ctx[4][0].indexOf(input1), 1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h1;
	let t1;
	let dropdown;
	let t2;
	let current;
	let mounted;
	let dispose;

	dropdown = new DropDown({
			props: {
				menuDisplayed: /*$projectStore*/ ctx[0].showTextOptions,
				toggleSubMenu: /*func*/ ctx[2]
			}
		});

	let if_block = /*$projectStore*/ ctx[0].showTextOptions && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "TEXT OPTIONS";
			t1 = space();
			create_component(dropdown.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			attr(h1, "class", "w-full text-left font-semibold cursor-pointer select-none");
			attr(div0, "id", "header");
			attr(div0, "class", "w-full flex flex-row");
			attr(div1, "id", "textOptions");
			attr(div1, "class", "w-full text-xs flex flex-col justify-center border-t-1 border-black px-3 py-3 select-none");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, h1);
			append(div0, t1);
			mount_component(dropdown, div0, null);
			append(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(h1, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const dropdown_changes = {};
			if (dirty & /*$projectStore*/ 1) dropdown_changes.menuDisplayed = /*$projectStore*/ ctx[0].showTextOptions;
			dropdown.$set(dropdown_changes);

			if (/*$projectStore*/ ctx[0].showTextOptions) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(dropdown);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(0, $projectStore = $$value));
	const $$binding_groups = [[]];

	const click_handler = () => {
		projectStore.toggleTextMenu();
	};

	const func = () => {
		projectStore.toggleTextMenu();
	};

	function input0_change_handler() {
		$projectStore.textNewLine = this.__value;
		projectStore.set($projectStore);
	}

	function input1_change_handler() {
		$projectStore.textNewLine = this.__value;
		projectStore.set($projectStore);
	}

	return [
		$projectStore,
		click_handler,
		func,
		input0_change_handler,
		$$binding_groups,
		input1_change_handler
	];
}

class TextOptions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default TextOptions;