/* src\Components\Sidebar\Sidebar.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import SidebarTab from "./SidebarTab.js";
import Edit from "./Edit.js";
import Export from "./Export.js";
import TextOptions from "./TextOptions.js";
import ProgressOptions from "./ProgressOptions.js";
import CanvasProperties from "./CanvasProperties.js";
import Shortcuts from "./Shortcuts.js";
import { projectStore } from "../../JS/stores/project.js";
import { updateCanvas } from "../../JS/draw/updateCanvas.js";

function create_else_block(ctx) {
	let export_1;
	let current;
	export_1 = new Export({});

	return {
		c() {
			create_component(export_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(export_1, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(export_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(export_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(export_1, detaching);
		}
	};
}

// (23:8) {#if $projectStore.showSidebar}
function create_if_block(ctx) {
	let div;
	let canvasproperties;
	let t0;
	let edit;
	let t1;
	let textoptions;
	let t2;
	let progressoptions;
	let t3;
	let shortcuts;
	let current;
	canvasproperties = new CanvasProperties({});
	edit = new Edit({});
	textoptions = new TextOptions({});
	progressoptions = new ProgressOptions({});
	shortcuts = new Shortcuts({});

	return {
		c() {
			div = element("div");
			create_component(canvasproperties.$$.fragment);
			t0 = space();
			create_component(edit.$$.fragment);
			t1 = space();
			create_component(textoptions.$$.fragment);
			t2 = space();
			create_component(progressoptions.$$.fragment);
			t3 = space();
			create_component(shortcuts.$$.fragment);
			attr(div, "id", "toolsSidebar");
			attr(div, "class", "w-full h-full");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(canvasproperties, div, null);
			append(div, t0);
			mount_component(edit, div, null);
			append(div, t1);
			mount_component(textoptions, div, null);
			append(div, t2);
			mount_component(progressoptions, div, null);
			append(div, t3);
			mount_component(shortcuts, div, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(canvasproperties.$$.fragment, local);
			transition_in(edit.$$.fragment, local);
			transition_in(textoptions.$$.fragment, local);
			transition_in(progressoptions.$$.fragment, local);
			transition_in(shortcuts.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(canvasproperties.$$.fragment, local);
			transition_out(edit.$$.fragment, local);
			transition_out(textoptions.$$.fragment, local);
			transition_out(progressoptions.$$.fragment, local);
			transition_out(shortcuts.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(canvasproperties);
			destroy_component(edit);
			destroy_component(textoptions);
			destroy_component(progressoptions);
			destroy_component(shortcuts);
		}
	};
}

function create_fragment(ctx) {
	let aside;
	let sidebartab;
	let t;
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	sidebartab = new SidebarTab({});
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$projectStore*/ ctx[0].showSidebar) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			aside = element("aside");
			create_component(sidebartab.$$.fragment);
			t = space();
			div = element("div");
			if_block.c();
			attr(div, "id", "sidebarBody");
			attr(div, "class", "w-full h-full border-l border-sidebar-border overflow-auto");
			attr(aside, "class", "bg-sidebar w-64 h-full text-xs flex flex-col justify-start items-center");
		},
		m(target, anchor) {
			insert(target, aside, anchor);
			mount_component(sidebartab, aside, null);
			append(aside, t);
			append(aside, div);
			if_blocks[current_block_type_index].m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(aside, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(sidebartab.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(sidebartab.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(aside);
			destroy_component(sidebartab);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(0, $projectStore = $$value));

	const click_handler = () => {
		updateCanvas();
	};

	return [$projectStore, click_handler];
}

class Sidebar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Sidebar;