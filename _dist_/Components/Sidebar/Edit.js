/* src\Components\Sidebar\Edit.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	space,
	svg_element,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import SidebarButton from "./SidebarButton.js";
import DropDown from "./DropDown.js";
import AlignSVG from "./AlignSVG.js";
import ArrowSVG from "./ArrowSVG.js";
import { projectStore } from "../../JS/stores/project.js";
import { tools } from "../../JS/constants/toolsList.js";
import { keyboardKeys } from "../../JS/constants/keyboardKeys.js";
import { duplicateObject } from "../../JS/draw/duplicate.js";
import { alignObjects } from "../../JS/draw/offset.js";
import { eraseObject } from "../../JS/draw/erase.js";
import { moveObject } from "../../JS/draw/move.js";

function create_if_block(ctx) {
	let div1;
	let div0;
	let sidebarbutton0;
	let t0;
	let sidebarbutton1;
	let t1;
	let div3;
	let div2;
	let sidebarbutton2;
	let t2;
	let sidebarbutton3;
	let t3;
	let sidebarbutton4;
	let t4;
	let sidebarbutton5;
	let t5;
	let div5;
	let sidebarbutton6;
	let t6;
	let div4;
	let sidebarbutton7;
	let t7;
	let sidebarbutton8;
	let t8;
	let sidebarbutton9;
	let current;

	sidebarbutton0 = new SidebarButton({
			props: {
				label: "duplicate (ctrl + c)",
				editCanvas: duplicateObject,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	sidebarbutton1 = new SidebarButton({
			props: {
				label: "delete (del)",
				editCanvas: eraseObject,
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	sidebarbutton2 = new SidebarButton({
			props: {
				label: "align left",
				editCanvas: /*func_1*/ ctx[3],
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	sidebarbutton3 = new SidebarButton({
			props: {
				label: "align right",
				editCanvas: /*func_2*/ ctx[4],
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	sidebarbutton4 = new SidebarButton({
			props: {
				label: "align top",
				editCanvas: /*func_3*/ ctx[5],
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	sidebarbutton5 = new SidebarButton({
			props: {
				label: "align bottom",
				editCanvas: /*func_4*/ ctx[6],
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	sidebarbutton6 = new SidebarButton({
			props: {
				label: "move up",
				editCanvas: /*func_5*/ ctx[7],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	sidebarbutton7 = new SidebarButton({
			props: {
				label: "move left",
				editCanvas: /*func_6*/ ctx[8],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	sidebarbutton8 = new SidebarButton({
			props: {
				label: "move right",
				editCanvas: /*func_7*/ ctx[9],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	sidebarbutton9 = new SidebarButton({
			props: {
				label: "move down",
				editCanvas: /*func_8*/ ctx[10],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(sidebarbutton0.$$.fragment);
			t0 = space();
			create_component(sidebarbutton1.$$.fragment);
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			create_component(sidebarbutton2.$$.fragment);
			t2 = space();
			create_component(sidebarbutton3.$$.fragment);
			t3 = space();
			create_component(sidebarbutton4.$$.fragment);
			t4 = space();
			create_component(sidebarbutton5.$$.fragment);
			t5 = space();
			div5 = element("div");
			create_component(sidebarbutton6.$$.fragment);
			t6 = space();
			div4 = element("div");
			create_component(sidebarbutton7.$$.fragment);
			t7 = space();
			create_component(sidebarbutton8.$$.fragment);
			t8 = space();
			create_component(sidebarbutton9.$$.fragment);
			attr(div0, "id", "firstButtonRow");
			attr(div0, "class", " w-full flex flex-row justify-around pt-3 pb-3");
			attr(div1, "id", "copy/delete");
			attr(div1, "class", "w-full flex flex-col items-start border-b border-gray-300");
			attr(div2, "id", "alignButtons");
			attr(div2, "class", "w-full py-2 flex flex-row justify-between");
			attr(div3, "id", "alignSection");
			attr(div3, "class", "w-full py-3 flex flex-col items-start border-b border-gray-300");
			attr(div4, "id", "horizButtons");
			attr(div4, "class", " w-full flex flex-row justify-around py-1");
			attr(div5, "id", "moveButtons");
			attr(div5, "class", "w-full flex flex-col justify-center items-center border-b-1 border-gray-200 pt-3");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(sidebarbutton0, div0, null);
			append(div0, t0);
			mount_component(sidebarbutton1, div0, null);
			insert(target, t1, anchor);
			insert(target, div3, anchor);
			append(div3, div2);
			mount_component(sidebarbutton2, div2, null);
			append(div2, t2);
			mount_component(sidebarbutton3, div2, null);
			append(div2, t3);
			mount_component(sidebarbutton4, div2, null);
			append(div2, t4);
			mount_component(sidebarbutton5, div2, null);
			insert(target, t5, anchor);
			insert(target, div5, anchor);
			mount_component(sidebarbutton6, div5, null);
			append(div5, t6);
			append(div5, div4);
			mount_component(sidebarbutton7, div4, null);
			append(div4, t7);
			mount_component(sidebarbutton8, div4, null);
			append(div5, t8);
			mount_component(sidebarbutton9, div5, null);
			current = true;
		},
		p(ctx, dirty) {
			const sidebarbutton0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton0_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton0.$set(sidebarbutton0_changes);
			const sidebarbutton1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton1_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton1.$set(sidebarbutton1_changes);
			const sidebarbutton2_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton2_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton2.$set(sidebarbutton2_changes);
			const sidebarbutton3_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton3_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton3.$set(sidebarbutton3_changes);
			const sidebarbutton4_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton4_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton4.$set(sidebarbutton4_changes);
			const sidebarbutton5_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton5_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton5.$set(sidebarbutton5_changes);
			const sidebarbutton6_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton6_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton6.$set(sidebarbutton6_changes);
			const sidebarbutton7_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton7_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton7.$set(sidebarbutton7_changes);
			const sidebarbutton8_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton8_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton8.$set(sidebarbutton8_changes);
			const sidebarbutton9_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				sidebarbutton9_changes.$$scope = { dirty, ctx };
			}

			sidebarbutton9.$set(sidebarbutton9_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sidebarbutton0.$$.fragment, local);
			transition_in(sidebarbutton1.$$.fragment, local);
			transition_in(sidebarbutton2.$$.fragment, local);
			transition_in(sidebarbutton3.$$.fragment, local);
			transition_in(sidebarbutton4.$$.fragment, local);
			transition_in(sidebarbutton5.$$.fragment, local);
			transition_in(sidebarbutton6.$$.fragment, local);
			transition_in(sidebarbutton7.$$.fragment, local);
			transition_in(sidebarbutton8.$$.fragment, local);
			transition_in(sidebarbutton9.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sidebarbutton0.$$.fragment, local);
			transition_out(sidebarbutton1.$$.fragment, local);
			transition_out(sidebarbutton2.$$.fragment, local);
			transition_out(sidebarbutton3.$$.fragment, local);
			transition_out(sidebarbutton4.$$.fragment, local);
			transition_out(sidebarbutton5.$$.fragment, local);
			transition_out(sidebarbutton6.$$.fragment, local);
			transition_out(sidebarbutton7.$$.fragment, local);
			transition_out(sidebarbutton8.$$.fragment, local);
			transition_out(sidebarbutton9.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(sidebarbutton0);
			destroy_component(sidebarbutton1);
			if (detaching) detach(t1);
			if (detaching) detach(div3);
			destroy_component(sidebarbutton2);
			destroy_component(sidebarbutton3);
			destroy_component(sidebarbutton4);
			destroy_component(sidebarbutton5);
			if (detaching) detach(t5);
			if (detaching) detach(div5);
			destroy_component(sidebarbutton6);
			destroy_component(sidebarbutton7);
			destroy_component(sidebarbutton8);
			destroy_component(sidebarbutton9);
		}
	};
}

// (26:12) <SidebarButton label={'duplicate (ctrl + c)'} editCanvas={duplicateObject}>
function create_default_slot_9(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "hover:text-header");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (31:12) <SidebarButton label={'delete (del)'} editCanvas={eraseObject}>
function create_default_slot_8(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "hover:text-header");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (41:12) <SidebarButton label={'align left'} editCanvas={()=>{alignObjects(keyboardKeys.LEFT)}}>
function create_default_slot_7(ctx) {
	let alignsvg;
	let current;
	alignsvg = new AlignSVG({ props: { degrees: "0" } });

	return {
		c() {
			create_component(alignsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(alignsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(alignsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alignsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(alignsvg, detaching);
		}
	};
}

// (44:12) <SidebarButton label={'align right'} editCanvas={()=>{alignObjects(keyboardKeys.RIGHT)}}>
function create_default_slot_6(ctx) {
	let alignsvg;
	let current;
	alignsvg = new AlignSVG({ props: { degrees: "180" } });

	return {
		c() {
			create_component(alignsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(alignsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(alignsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alignsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(alignsvg, detaching);
		}
	};
}

// (47:12) <SidebarButton label={'align top'} editCanvas={()=>{alignObjects(keyboardKeys.UP)}}>
function create_default_slot_5(ctx) {
	let alignsvg;
	let current;
	alignsvg = new AlignSVG({ props: { degrees: "90" } });

	return {
		c() {
			create_component(alignsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(alignsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(alignsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alignsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(alignsvg, detaching);
		}
	};
}

// (50:12) <SidebarButton label={'align bottom'} editCanvas={()=>{alignObjects(keyboardKeys.DOWN)}}>
function create_default_slot_4(ctx) {
	let alignsvg;
	let current;
	alignsvg = new AlignSVG({ props: { degrees: "270" } });

	return {
		c() {
			create_component(alignsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(alignsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(alignsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alignsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(alignsvg, detaching);
		}
	};
}

// (57:8) <SidebarButton label={'move up'} editCanvas={()=>{moveObject(keyboardKeys.UP)}}>
function create_default_slot_3(ctx) {
	let arrowsvg;
	let current;
	arrowsvg = new ArrowSVG({ props: { degrees: "0" } });

	return {
		c() {
			create_component(arrowsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(arrowsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(arrowsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(arrowsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(arrowsvg, detaching);
		}
	};
}

// (61:12) <SidebarButton label={'move left'} editCanvas={()=>{moveObject(keyboardKeys.LEFT)}}>
function create_default_slot_2(ctx) {
	let arrowsvg;
	let current;
	arrowsvg = new ArrowSVG({ props: { degrees: "270" } });

	return {
		c() {
			create_component(arrowsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(arrowsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(arrowsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(arrowsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(arrowsvg, detaching);
		}
	};
}

// (64:12) <SidebarButton label={'move right'} editCanvas={()=>{moveObject(keyboardKeys.RIGHT)}}>
function create_default_slot_1(ctx) {
	let arrowsvg;
	let current;
	arrowsvg = new ArrowSVG({ props: { degrees: "90" } });

	return {
		c() {
			create_component(arrowsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(arrowsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(arrowsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(arrowsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(arrowsvg, detaching);
		}
	};
}

// (68:8) <SidebarButton label={'move down'} editCanvas={()=>{moveObject(keyboardKeys.DOWN)}}>
function create_default_slot(ctx) {
	let arrowsvg;
	let current;
	arrowsvg = new ArrowSVG({ props: { degrees: "180" } });

	return {
		c() {
			create_component(arrowsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(arrowsvg, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(arrowsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(arrowsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(arrowsvg, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h1;
	let t1;
	let dropdown;
	let t2;
	let current;
	let mounted;
	let dispose;

	dropdown = new DropDown({
			props: {
				menuDisplayed: /*$projectStore*/ ctx[0].showEditOptions,
				toggleSubMenu: /*func*/ ctx[2]
			}
		});

	let if_block = /*$projectStore*/ ctx[0].showEditOptions && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "EDIT";
			t1 = space();
			create_component(dropdown.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			attr(h1, "class", "w-full text-left font-semibold cursor-pointer select-none");
			attr(div0, "id", "header");
			attr(div0, "class", "w-full flex flex-row");
			attr(div1, "id", "editSection");
			attr(div1, "class", "w-full flex flex-col border-t border-b border-black px-3 py-3");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, h1);
			append(div0, t1);
			mount_component(dropdown, div0, null);
			append(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(h1, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const dropdown_changes = {};
			if (dirty & /*$projectStore*/ 1) dropdown_changes.menuDisplayed = /*$projectStore*/ ctx[0].showEditOptions;
			dropdown.$set(dropdown_changes);

			if (/*$projectStore*/ ctx[0].showEditOptions) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$projectStore*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(dropdown.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(dropdown);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(0, $projectStore = $$value));

	const click_handler = () => {
		projectStore.toggleEditMenu();
	};

	const func = () => {
		projectStore.toggleEditMenu();
	};

	const func_1 = () => {
		alignObjects(keyboardKeys.LEFT);
	};

	const func_2 = () => {
		alignObjects(keyboardKeys.RIGHT);
	};

	const func_3 = () => {
		alignObjects(keyboardKeys.UP);
	};

	const func_4 = () => {
		alignObjects(keyboardKeys.DOWN);
	};

	const func_5 = () => {
		moveObject(keyboardKeys.UP);
	};

	const func_6 = () => {
		moveObject(keyboardKeys.LEFT);
	};

	const func_7 = () => {
		moveObject(keyboardKeys.RIGHT);
	};

	const func_8 = () => {
		moveObject(keyboardKeys.DOWN);
	};

	return [
		$projectStore,
		click_handler,
		func,
		func_1,
		func_2,
		func_3,
		func_4,
		func_5,
		func_6,
		func_7,
		func_8
	];
}

class Edit extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Edit;