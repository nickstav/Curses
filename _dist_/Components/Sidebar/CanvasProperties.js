/* src\Components\Sidebar\CanvasProperties.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import DropDown from "./DropDown.js";
import { projectStore } from "../../JS/stores/project.js";
import { updateCanvas } from "../../JS/draw/updateCanvas.js";

function create_if_block(ctx) {
	let div2;
	let div0;
	let label0;
	let t1;
	let input0;
	let t2;
	let div1;
	let label1;
	let t4;
	let input1;
	let t5;
	let div4;
	let h2;
	let t7;
	let div3;
	let label2;
	let input2;
	let input2_value_value;
	let t8;
	let t9;
	let label3;
	let input3;
	let input3_value_value;
	let t10;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = "width";
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = "height";
			t4 = space();
			input1 = element("input");
			t5 = space();
			div4 = element("div");
			h2 = element("h2");
			h2.textContent = "appearance";
			t7 = space();
			div3 = element("div");
			label2 = element("label");
			input2 = element("input");
			t8 = text("\r\n                light");
			t9 = space();
			label3 = element("label");
			input3 = element("input");
			t10 = text("\r\n                dark");
			attr(label0, "for", "width");
			attr(label0, "class", "text-xs w-12 text-left");
			attr(input0, "type", "text");
			attr(input0, "id", "width");
			attr(input0, "size", "3");
			attr(input0, "maxlength", "4");
			attr(input0, "class", "text-xs h-5 flex-1 pl-1 rounded-sm bg-gray-50 border border-sidebar-border");
			attr(div0, "id", "widthInput");
			attr(div0, "class", "w-full flex flex-row pb-2 items-center");
			attr(label1, "for", "height");
			attr(label1, "class", "text-xs w-12 text-left");
			attr(input1, "type", "text");
			attr(input1, "id", "height");
			attr(input1, "size", "3");
			attr(input1, "maxlength", "4");
			attr(input1, "class", "text-xs h-5 flex-1 pl-1 rounded-sm bg-gray-50 border border-sidebar-border");
			attr(div1, "id", "heightInput");
			attr(div1, "class", "w-full flex flex-row items-center");
			attr(div2, "id", "canvasSizing");
			attr(div2, "class", "w-full font-semibold text-gray-700 flex flex-col items-start py-3 border-b border-gray-300");
			attr(h2, "class", "font-bold pb-2");
			attr(input2, "type", "radio");
			input2.__value = input2_value_value = "light";
			input2.value = input2.__value;
			attr(input2, "class", "align-middle pr-2");
			/*$$binding_groups*/ ctx[8][0].push(input2);
			attr(label2, "for", "toLeft");
			attr(label2, "class", "pb-1 text-left font-semibold text-gray-700");
			attr(input3, "type", "radio");
			input3.__value = input3_value_value = "dark";
			input3.value = input3.__value;
			attr(input3, "class", "align-middle");
			/*$$binding_groups*/ ctx[8][0].push(input3);
			attr(label3, "for", "indented");
			attr(label3, "class", "pb-1 text-left font-semibold text-gray-700");
			attr(div3, "id", "appearanceMode");
			attr(div3, "class", "flex flex-row justify-around w-full");
			attr(div4, "id", "colourMode");
			attr(div4, "class", "w-full flex flex-col items-start pt-3");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, label0);
			append(div0, t1);
			append(div0, input0);
			set_input_value(input0, /*$projectStore*/ ctx[0].canvasWidth);
			append(div2, t2);
			append(div2, div1);
			append(div1, label1);
			append(div1, t4);
			append(div1, input1);
			set_input_value(input1, /*$projectStore*/ ctx[0].canvasHeight);
			insert(target, t5, anchor);
			insert(target, div4, anchor);
			append(div4, h2);
			append(div4, t7);
			append(div4, div3);
			append(div3, label2);
			append(label2, input2);
			input2.checked = input2.__value === /*$projectStore*/ ctx[0].appearance;
			append(label2, t8);
			append(div3, t9);
			append(div3, label3);
			append(label3, input3);
			input3.checked = input3.__value === /*$projectStore*/ ctx[0].appearance;
			append(label3, t10);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[3]),
					listen(input0, "input", /*input_handler*/ ctx[4]),
					listen(input1, "input", /*input1_input_handler*/ ctx[5]),
					listen(input1, "input", /*input_handler_1*/ ctx[6]),
					listen(input2, "change", /*input2_change_handler*/ ctx[7]),
					listen(input2, "change", /*change_handler*/ ctx[9]),
					listen(input3, "change", /*input3_change_handler*/ ctx[10]),
					listen(input3, "change", /*change_handler_1*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$projectStore*/ 1 && input0.value !== /*$projectStore*/ ctx[0].canvasWidth) {
				set_input_value(input0, /*$projectStore*/ ctx[0].canvasWidth);
			}

			if (dirty & /*$projectStore*/ 1 && input1.value !== /*$projectStore*/ ctx[0].canvasHeight) {
				set_input_value(input1, /*$projectStore*/ ctx[0].canvasHeight);
			}

			if (dirty & /*$projectStore*/ 1) {
				input2.checked = input2.__value === /*$projectStore*/ ctx[0].appearance;
			}

			if (dirty & /*$projectStore*/ 1) {
				input3.checked = input3.__value === /*$projectStore*/ ctx[0].appearance;
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching) detach(t5);
			if (detaching) detach(div4);
			/*$$binding_groups*/ ctx[8][0].splice(/*$$binding_groups*/ ctx[8][0].indexOf(input2), 1);
			/*$$binding_groups*/ ctx[8][0].splice(/*$$binding_groups*/ ctx[8][0].indexOf(input3), 1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h1;
	let t1;
	let dropdown;
	let t2;
	let current;
	let mounted;
	let dispose;

	dropdown = new DropDown({
			props: {
				menuDisplayed: /*$projectStore*/ ctx[0].showCanvasOptions,
				toggleSubMenu: /*func*/ ctx[2]
			}
		});

	let if_block = /*$projectStore*/ ctx[0].showCanvasOptions && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "CANVAS OPTIONS";
			t1 = space();
			create_component(dropdown.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			attr(h1, "class", "w-full flex flex-1 text-left font-semibold cursor-pointer select-none");
			attr(div0, "id", "header");
			attr(div0, "class", "w-full flex flex-row");
			attr(div1, "id", "canvasSection");
			attr(div1, "class", "w-full flex flex-col px-3 py-3 select-none");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, h1);
			append(div0, t1);
			mount_component(dropdown, div0, null);
			append(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(h1, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const dropdown_changes = {};
			if (dirty & /*$projectStore*/ 1) dropdown_changes.menuDisplayed = /*$projectStore*/ ctx[0].showCanvasOptions;
			dropdown.$set(dropdown_changes);

			if (/*$projectStore*/ ctx[0].showCanvasOptions) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(dropdown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dropdown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(dropdown);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $projectStore;
	component_subscribe($$self, projectStore, $$value => $$invalidate(0, $projectStore = $$value));
	const $$binding_groups = [[]];

	const click_handler = () => {
		projectStore.toggleCanvasMenu();
	};

	const func = () => {
		projectStore.toggleCanvasMenu();
	};

	function input0_input_handler() {
		$projectStore.canvasWidth = this.value;
		projectStore.set($projectStore);
	}

	const input_handler = () => {
		updateCanvas();
	};

	function input1_input_handler() {
		$projectStore.canvasHeight = this.value;
		projectStore.set($projectStore);
	}

	const input_handler_1 = () => {
		updateCanvas();
	};

	function input2_change_handler() {
		$projectStore.appearance = this.__value;
		projectStore.set($projectStore);
	}

	const change_handler = () => {
		updateCanvas();
	};

	function input3_change_handler() {
		$projectStore.appearance = this.__value;
		projectStore.set($projectStore);
	}

	const change_handler_1 = () => {
		updateCanvas();
	};

	return [
		$projectStore,
		click_handler,
		func,
		input0_input_handler,
		input_handler,
		input1_input_handler,
		input_handler_1,
		input2_change_handler,
		$$binding_groups,
		change_handler,
		input3_change_handler,
		change_handler_1
	];
}

class CanvasProperties extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default CanvasProperties;